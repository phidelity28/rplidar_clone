src/sl_async_transceiver.cpp:204:16: error: unknown type name 'nullptr_t'; did you mean 'std::nullptr_t'?
        Result<nullptr_t> ans = SL_RESULT_OK;
               ^~~~~~~~~
               std::nullptr_t
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/__nullptr:57:31: note: 
      'std::nullptr_t' declared here
    typedef decltype(nullptr) nullptr_t;
                              ^
1 error generated.
make[1]: *** [/Users/rafe2.2/python_documents/vscode_projects/rplidar/rplidar_sdk/obj/Darwin/Release/sdk/src/sl_async_transceiver.o] Error 1
make: *** [make_subs] Error 1
ChatGPT
It looks like there's an error related to the use of nullptr_t. The compiler is indicating that it doesn't recognize the type nullptr_t and suggests using std::nullptr_t instead.

The code seems to be attempting to use nullptr_t without the std:: namespace. This might happen if the code is being compiled in a context where the std namespace isn't automatically available.

To fix this issue, you can either prepend std:: before nullptr_t in your code or add using namespace std; at the beginning of the file where nullptr_t is being used. Here's an example of both approaches:

Using std::nullptr_t directly:

cpp
Copy code
Result<std::nullptr_t> ans = SL_RESULT_OK;
Or adding using namespace std; at the beginning of the file:

cpp
Copy code
#include <your_other_includes>

using namespace std;

// Your code where you use nullptr_t
Result<nullptr_t> ans = SL_RESULT_OK;
Remember that using using namespace std; brings the entire std namespace into scope, which might not be preferred in larger projects to avoid namespace collisions. So, the first approach of using
 std::nullptr_t directly might be more advisable in certain contexts.


# this finalized the cloning correctly
miniconda3) rafes-MacBook-Pro:~ rafe2.2$ cd python_documents/vscode_projects/rplidar/rplidar_sdk/
(miniconda3) rafes-MacBook-Pro:rplidar_sdk rafe2.2$ git remote add rplidar_clone https://github.com/phidelity28/rplidar_clone
(miniconda3) rafes-MacBook-Pro:rplidar_sdk rafe2.2$ git push -u rplidar_clone main
error: src refspec main does not match any.
error: failed to push some refs to 'https://github.com/phidelity28/rplidar_clone'
(miniconda3) rafes-MacBook-Pro:rplidar_sdk rafe2.2$ git remote add rplidar_clone https://github.com/phidelity28/rplidar_clone.git
fatal: remote rplidar_clone already exists.
(miniconda3) rafes-MacBook-Pro:rplidar_sdk rafe2.2$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/dev-sdk
  remotes/origin/feature/release-2.0
  remotes/origin/feature/support-T1
  remotes/origin/master
  remotes/origin/ultra-capsule-bug
(miniconda3) rafes-MacBook-Pro:rplidar_sdk rafe2.2$ git push -u rplidar_clone master
Counting objects: 665, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (308/308), done.
Writing objects: 100% (665/665), 18.45 MiB | 7.70 MiB/s, done.
Total 665 (delta 355), reused 655 (delta 350)
remote: Resolving deltas: 100% (355/355), done.
To https://github.com/phidelity28/rplidar_clone
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'rplidar_clone'.